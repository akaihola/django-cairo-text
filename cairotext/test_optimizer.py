#!/usr/bin/env python

import sys
from optparse import OptionParser

TEST_IMAGE = (
    '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00#\x00\x00\x00\r\x08\x06'
    '\x00\x00\x00#\x7f\xd7\x1f\x00\x00\x00\x06bKGD\x00\xff\x00\xff\x00\xff'
    '\xa0\xbd\xa7\x93\x00\x00\x02CIDAT8\x8d\xcd\x931K\xf2Q\x14\xc6\x9f\xfb'
    '\x9a.A4H\x04&\x0e\x0e\x0e\x85DVSC_!P\xa4\xfa\x06-!4\xf8\r\xfa\x00m\xda"'
    '\x14Bm-\xb5\x04\r!\xd4\x14\xce\xd2\xe6\x90R\x1a\x92\xa2\xfd\xfd\xff\xde!'
    '\xbc\xf4\xcf\xbf\xbd\xef\xbb\xc4\xfb\xc0\x19\xee9\xe7\x9e\xe7\xe1\xb9\xf7'
    '\x18\x00c\x8c$\t\xd0O\xc1\x8f\xf3\xd7\x8f\xb1\xff\x05\xfe/1#\xbb\xa4\x0f'
    '\xebF1\x02\xa0\x93\x93\x13mnnjvvV\xc1`P\xf1x\\\x07\x07\x07j\xb7\xdb\xb6o{'
    '{[\xc6\x18%\x93I\xb9\xaek\xf3\xae\xeb*\x99L\xca\x18\xa3\xdd\xdd]\xcb3\x89'
    '\x13\xbf\x00p]\x97\x9d\x9d\x1d\xdf\xba$\x16\x17\x17i\xb7\xdb\x00<??\x13'
    '\x89D\x90D\xb9\\f\x84r\xb9\x8c$b\xb1\x18\xadV\x0b>>\x89\x7f|.~E\xa1P@\x12'
    '\x0b\x0b\x0b\x9c\x9d\x9d\xd1h4\xe8\xf5zT*\x15R\xa9\x14\x92\xc8\xe7\xf3'
    '\xb6\xff\xea\xea\nc\x0c\x89D\x02\xc7qp\x1c\x87D"A \x10\xe0\xe6\xe6\xc63'
    '\xdb\x8f\xf3[1\xeb\xeb\xebH\xe2\xf6\xf6v\xacV\xab\xd5\x90D<\x1e\xf7\xe4'
    '\xf7\xf6\xf6\x90D\xa9T\xa2T*\x8d\t\xfeN\x8c\x81\xc9\xab===\xadn\xb7\xfb'
    '\xed\xa7\x0b\x85B\xea\xf7\xfb\xf6\xfc\xf6\xf6\xa6\xe5\xe5e;kffFwww\n\x06'
    '\x83\x9e{\xff\xbc\xda_\xc5\xf9a0\x18x\xce\x9dNG///z\x7f\x7fW\xb3\xd9T\xbd'
    '^\xd7\xeb\xeb\xeb\x1f\xe7\x8c\x08\x99\x9a\x9aB\x12\x8e\xe3xl[]]E\x12\xf7'
    '\xf7\xf7c6O\xc2\xd6\xd6\x96}\xa6\xc3\xc3C$\x91\xcdf\xc7\xfa\xfc8\x05\x10'
    '\x8dF\x91\xc4\xe5\xe5%\xc3\xe1\xd0\x16\x8f\x8f\x8f\x91\xc4\xfc\xfc<\xc5b'
    '\x91\xc7\xc7G\xba\xdd.\xadV\x8b\x87\x87\x07\x8e\x8e\x8eH\xa5R\xb6\x7f\xb4'
    '9KKK\x0c\x87Cz\xbd\x1e\xb1X\x0cI\x9c\x9f\x9f{\xc4\xf8q\n \x93\xc9L\\\xed'
    '\xfd\xfd\xfd\xc9\xab\xf8\xa9\xf7\xe9\xe9\x89p8\x8c$...,\xe9\xe9\xe9)\x92'
    '\x98\x9b\x9b\xa3\xd9l\xda\xbc\x1f\xa7\x00\xea\xf5:\x99L\x86h4j\xed\xfb'
    '\x8c\xeb\xebk[\x0f\x85B\x84\xc3aVVV\xc8\xe5rT\xabU\x00\xd2\xe94\x92\xd8'
    '\xd8\xd8\xf0\xdcu]\x97\xb5\xb55$\x91N\xa7m\xde\x8f\xf37E\r\xcc\xcc\xd4'
    '\xbf\xd3u\x00\x00\x00\x00IEND\xaeB`\x82')

if __name__ == '__main__':
    p = OptionParser()
    p.add_option('-f', '--fail', action='store_true')
    p.add_option('-n', '--nosave', action='store_true')
    opts, args = p.parse_args()
    if not opts.nosave:
        name, ext = args[0].rsplit('.', 1)
        file('%s-optimized.%s' % (name, ext), 'w').write(TEST_IMAGE)
    sys.exit(bool(opts.fail))
